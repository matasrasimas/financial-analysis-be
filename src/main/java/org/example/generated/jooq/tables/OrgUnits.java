/*
 * This file is generated by jOOQ.
 */
package org.example.generated.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.example.generated.jooq.DefaultSchema;
import org.example.generated.jooq.Keys;
import org.example.generated.jooq.tables.AutomaticTransactions.AutomaticTransactionsPath;
import org.example.generated.jooq.tables.Organizations.OrganizationsPath;
import org.example.generated.jooq.tables.Transactions.TransactionsPath;
import org.example.generated.jooq.tables.records.OrgUnitsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrgUnits extends TableImpl<OrgUnitsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>org_units</code>
     */
    public static final OrgUnits ORG_UNITS = new OrgUnits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgUnitsRecord> getRecordType() {
        return OrgUnitsRecord.class;
    }

    /**
     * The column <code>org_units.id</code>.
     */
    public final TableField<OrgUnitsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>org_units.organization_id</code>.
     */
    public final TableField<OrgUnitsRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>org_units.title</code>.
     */
    public final TableField<OrgUnitsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>org_units.code</code>.
     */
    public final TableField<OrgUnitsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>org_units.address</code>.
     */
    public final TableField<OrgUnitsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB, this, "");

    private OrgUnits(Name alias, Table<OrgUnitsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrgUnits(Name alias, Table<OrgUnitsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>org_units</code> table reference
     */
    public OrgUnits(String alias) {
        this(DSL.name(alias), ORG_UNITS);
    }

    /**
     * Create an aliased <code>org_units</code> table reference
     */
    public OrgUnits(Name alias) {
        this(alias, ORG_UNITS);
    }

    /**
     * Create a <code>org_units</code> table reference
     */
    public OrgUnits() {
        this(DSL.name("org_units"), null);
    }

    public <O extends Record> OrgUnits(Table<O> path, ForeignKey<O, OrgUnitsRecord> childPath, InverseForeignKey<O, OrgUnitsRecord> parentPath) {
        super(path, childPath, parentPath, ORG_UNITS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrgUnitsPath extends OrgUnits implements Path<OrgUnitsRecord> {
        public <O extends Record> OrgUnitsPath(Table<O> path, ForeignKey<O, OrgUnitsRecord> childPath, InverseForeignKey<O, OrgUnitsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrgUnitsPath(Name alias, Table<OrgUnitsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrgUnitsPath as(String alias) {
            return new OrgUnitsPath(DSL.name(alias), this);
        }

        @Override
        public OrgUnitsPath as(Name alias) {
            return new OrgUnitsPath(alias, this);
        }

        @Override
        public OrgUnitsPath as(Table<?> alias) {
            return new OrgUnitsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrgUnitsRecord> getPrimaryKey() {
        return Keys.ORG_UNITS_PKEY;
    }

    @Override
    public List<ForeignKey<OrgUnitsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORG_UNITS__ORG_UNITS_ORGANIZATION_ID_FKEY);
    }

    private transient OrganizationsPath _organizations;

    /**
     * Get the implicit join path to the <code>public.organizations</code>
     * table.
     */
    public OrganizationsPath organizations() {
        if (_organizations == null)
            _organizations = new OrganizationsPath(this, Keys.ORG_UNITS__ORG_UNITS_ORGANIZATION_ID_FKEY, null);

        return _organizations;
    }

    private transient AutomaticTransactionsPath _automaticTransactions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.automatic_transactions</code> table
     */
    public AutomaticTransactionsPath automaticTransactions() {
        if (_automaticTransactions == null)
            _automaticTransactions = new AutomaticTransactionsPath(this, null, Keys.AUTOMATIC_TRANSACTIONS__AUTOMATIC_TRANSACTIONS_ORG_UNIT_ID_FKEY.getInverseKey());

        return _automaticTransactions;
    }

    private transient TransactionsPath _transactions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.transactions</code> table
     */
    public TransactionsPath transactions() {
        if (_transactions == null)
            _transactions = new TransactionsPath(this, null, Keys.TRANSACTIONS__TRANSACTIONS_ORG_UNIT_ID_FKEY.getInverseKey());

        return _transactions;
    }

    @Override
    public OrgUnits as(String alias) {
        return new OrgUnits(DSL.name(alias), this);
    }

    @Override
    public OrgUnits as(Name alias) {
        return new OrgUnits(alias, this);
    }

    @Override
    public OrgUnits as(Table<?> alias) {
        return new OrgUnits(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrgUnits rename(String name) {
        return new OrgUnits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrgUnits rename(Name name) {
        return new OrgUnits(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrgUnits rename(Table<?> name) {
        return new OrgUnits(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits where(Condition condition) {
        return new OrgUnits(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrgUnits where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrgUnits where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrgUnits where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrgUnits where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrgUnits whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
