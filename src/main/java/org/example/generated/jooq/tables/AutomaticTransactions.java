/*
 * This file is generated by jOOQ.
 */
package org.example.generated.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.example.generated.jooq.DefaultSchema;
import org.example.generated.jooq.Keys;
import org.example.generated.jooq.enums.DurationEnum;
import org.example.generated.jooq.tables.OrgUnits.OrgUnitsPath;
import org.example.generated.jooq.tables.records.AutomaticTransactionsRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AutomaticTransactions extends TableImpl<AutomaticTransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>automatic_transactions</code>
     */
    public static final AutomaticTransactions AUTOMATIC_TRANSACTIONS = new AutomaticTransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AutomaticTransactionsRecord> getRecordType() {
        return AutomaticTransactionsRecord.class;
    }

    /**
     * The column <code>automatic_transactions.id</code>.
     */
    public final TableField<AutomaticTransactionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.org_unit_id</code>.
     */
    public final TableField<AutomaticTransactionsRecord, UUID> ORG_UNIT_ID = createField(DSL.name("org_unit_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.amount</code>.
     */
    public final TableField<AutomaticTransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.title</code>.
     */
    public final TableField<AutomaticTransactionsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.description</code>.
     */
    public final TableField<AutomaticTransactionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>automatic_transactions.latest_transaction_date</code>.
     */
    public final TableField<AutomaticTransactionsRecord, LocalDateTime> LATEST_TRANSACTION_DATE = createField(DSL.name("latest_transaction_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.duration</code>.
     */
    public final TableField<AutomaticTransactionsRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automatic_transactions.duration_unit</code>.
     */
    public final TableField<AutomaticTransactionsRecord, DurationEnum> DURATION_UNIT = createField(DSL.name("duration_unit"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(DurationEnum.class), this, "");

    private AutomaticTransactions(Name alias, Table<AutomaticTransactionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AutomaticTransactions(Name alias, Table<AutomaticTransactionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>automatic_transactions</code> table reference
     */
    public AutomaticTransactions(String alias) {
        this(DSL.name(alias), AUTOMATIC_TRANSACTIONS);
    }

    /**
     * Create an aliased <code>automatic_transactions</code> table reference
     */
    public AutomaticTransactions(Name alias) {
        this(alias, AUTOMATIC_TRANSACTIONS);
    }

    /**
     * Create a <code>automatic_transactions</code> table reference
     */
    public AutomaticTransactions() {
        this(DSL.name("automatic_transactions"), null);
    }

    public <O extends Record> AutomaticTransactions(Table<O> path, ForeignKey<O, AutomaticTransactionsRecord> childPath, InverseForeignKey<O, AutomaticTransactionsRecord> parentPath) {
        super(path, childPath, parentPath, AUTOMATIC_TRANSACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AutomaticTransactionsPath extends AutomaticTransactions implements Path<AutomaticTransactionsRecord> {
        public <O extends Record> AutomaticTransactionsPath(Table<O> path, ForeignKey<O, AutomaticTransactionsRecord> childPath, InverseForeignKey<O, AutomaticTransactionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AutomaticTransactionsPath(Name alias, Table<AutomaticTransactionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AutomaticTransactionsPath as(String alias) {
            return new AutomaticTransactionsPath(DSL.name(alias), this);
        }

        @Override
        public AutomaticTransactionsPath as(Name alias) {
            return new AutomaticTransactionsPath(alias, this);
        }

        @Override
        public AutomaticTransactionsPath as(Table<?> alias) {
            return new AutomaticTransactionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AutomaticTransactionsRecord> getPrimaryKey() {
        return Keys.AUTOMATIC_TRANSACTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<AutomaticTransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTOMATIC_TRANSACTIONS__AUTOMATIC_TRANSACTIONS_ORG_UNIT_ID_FKEY);
    }

    private transient OrgUnitsPath _orgUnits;

    /**
     * Get the implicit join path to the <code>public.org_units</code> table.
     */
    public OrgUnitsPath orgUnits() {
        if (_orgUnits == null)
            _orgUnits = new OrgUnitsPath(this, Keys.AUTOMATIC_TRANSACTIONS__AUTOMATIC_TRANSACTIONS_ORG_UNIT_ID_FKEY, null);

        return _orgUnits;
    }

    @Override
    public List<Check<AutomaticTransactionsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("automatic_transactions_duration_check"), "((duration > 0))", true)
        );
    }

    @Override
    public AutomaticTransactions as(String alias) {
        return new AutomaticTransactions(DSL.name(alias), this);
    }

    @Override
    public AutomaticTransactions as(Name alias) {
        return new AutomaticTransactions(alias, this);
    }

    @Override
    public AutomaticTransactions as(Table<?> alias) {
        return new AutomaticTransactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AutomaticTransactions rename(String name) {
        return new AutomaticTransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AutomaticTransactions rename(Name name) {
        return new AutomaticTransactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AutomaticTransactions rename(Table<?> name) {
        return new AutomaticTransactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions where(Condition condition) {
        return new AutomaticTransactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutomaticTransactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutomaticTransactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutomaticTransactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AutomaticTransactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AutomaticTransactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
