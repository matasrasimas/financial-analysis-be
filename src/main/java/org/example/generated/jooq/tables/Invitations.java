/*
 * This file is generated by jOOQ.
 */
package org.example.generated.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.example.generated.jooq.DefaultSchema;
import org.example.generated.jooq.Keys;
import org.example.generated.jooq.tables.Organizations.OrganizationsPath;
import org.example.generated.jooq.tables.Users.UsersPath;
import org.example.generated.jooq.tables.records.InvitationsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Invitations extends TableImpl<InvitationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>invitations</code>
     */
    public static final Invitations INVITATIONS = new Invitations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationsRecord> getRecordType() {
        return InvitationsRecord.class;
    }

    /**
     * The column <code>invitations.id</code>.
     */
    public final TableField<InvitationsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>invitations.sender_id</code>.
     */
    public final TableField<InvitationsRecord, UUID> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>invitations.receiver_id</code>.
     */
    public final TableField<InvitationsRecord, UUID> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>invitations.organization_id</code>.
     */
    public final TableField<InvitationsRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>invitations.created_at</code>.
     */
    public final TableField<InvitationsRecord, LocalDate> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>invitations.is_accepted</code>.
     */
    public final TableField<InvitationsRecord, Boolean> IS_ACCEPTED = createField(DSL.name("is_accepted"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private Invitations(Name alias, Table<InvitationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Invitations(Name alias, Table<InvitationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>invitations</code> table reference
     */
    public Invitations(String alias) {
        this(DSL.name(alias), INVITATIONS);
    }

    /**
     * Create an aliased <code>invitations</code> table reference
     */
    public Invitations(Name alias) {
        this(alias, INVITATIONS);
    }

    /**
     * Create a <code>invitations</code> table reference
     */
    public Invitations() {
        this(DSL.name("invitations"), null);
    }

    public <O extends Record> Invitations(Table<O> path, ForeignKey<O, InvitationsRecord> childPath, InverseForeignKey<O, InvitationsRecord> parentPath) {
        super(path, childPath, parentPath, INVITATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InvitationsPath extends Invitations implements Path<InvitationsRecord> {
        public <O extends Record> InvitationsPath(Table<O> path, ForeignKey<O, InvitationsRecord> childPath, InverseForeignKey<O, InvitationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InvitationsPath(Name alias, Table<InvitationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InvitationsPath as(String alias) {
            return new InvitationsPath(DSL.name(alias), this);
        }

        @Override
        public InvitationsPath as(Name alias) {
            return new InvitationsPath(alias, this);
        }

        @Override
        public InvitationsPath as(Table<?> alias) {
            return new InvitationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<InvitationsRecord> getPrimaryKey() {
        return Keys.INVITATIONS_PKEY;
    }

    @Override
    public List<ForeignKey<InvitationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVITATIONS__INVITATIONS_SENDER_ID_FKEY, Keys.INVITATIONS__INVITATIONS_RECEIVER_ID_FKEY, Keys.INVITATIONS__INVITATIONS_ORGANIZATION_ID_FKEY);
    }

    private transient UsersPath _invitationsSenderIdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>invitations_sender_id_fkey</code> key.
     */
    public UsersPath invitationsSenderIdFkey() {
        if (_invitationsSenderIdFkey == null)
            _invitationsSenderIdFkey = new UsersPath(this, Keys.INVITATIONS__INVITATIONS_SENDER_ID_FKEY, null);

        return _invitationsSenderIdFkey;
    }

    private transient UsersPath _invitationsReceiverIdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>invitations_receiver_id_fkey</code> key.
     */
    public UsersPath invitationsReceiverIdFkey() {
        if (_invitationsReceiverIdFkey == null)
            _invitationsReceiverIdFkey = new UsersPath(this, Keys.INVITATIONS__INVITATIONS_RECEIVER_ID_FKEY, null);

        return _invitationsReceiverIdFkey;
    }

    private transient OrganizationsPath _organizations;

    /**
     * Get the implicit join path to the <code>public.organizations</code>
     * table.
     */
    public OrganizationsPath organizations() {
        if (_organizations == null)
            _organizations = new OrganizationsPath(this, Keys.INVITATIONS__INVITATIONS_ORGANIZATION_ID_FKEY, null);

        return _organizations;
    }

    @Override
    public Invitations as(String alias) {
        return new Invitations(DSL.name(alias), this);
    }

    @Override
    public Invitations as(Name alias) {
        return new Invitations(alias, this);
    }

    @Override
    public Invitations as(Table<?> alias) {
        return new Invitations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitations rename(String name) {
        return new Invitations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitations rename(Name name) {
        return new Invitations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitations rename(Table<?> name) {
        return new Invitations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations where(Condition condition) {
        return new Invitations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
